syntax = "proto3";

package raft;

option go_package = "github.com/raft-kv-store/proto/raft";

// Internal Raft consensus RPCs
service RaftService {
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
  rpc InstallSnapshot(stream InstallSnapshotRequest) returns (InstallSnapshotResponse);
}

message RequestVoteRequest {
  uint64 term = 1;
  string candidate_id = 2;
  uint64 last_log_index = 3;
  uint64 last_log_term = 4;
}

message RequestVoteResponse {
  uint64 term = 1;
  bool vote_granted = 2;
}

message LogEntry {
  uint64 index = 1;
  uint64 term = 2;
  bytes command = 3; // Serialized KV operation
  string command_type = 4; // "PUT", "DELETE"
}

message AppendEntriesRequest {
  uint64 term = 1;
  string leader_id = 2;
  uint64 prev_log_index = 3;
  uint64 prev_log_term = 4;
  repeated LogEntry entries = 5;
  uint64 leader_commit = 6;
}

message AppendEntriesResponse {
  uint64 term = 1;
  bool success = 2;
  uint64 match_index = 3; // For leader to update follower progress
}

message InstallSnapshotRequest {
  uint64 term = 1;
  string leader_id = 2;
  uint64 last_included_index = 3;
  uint64 last_included_term = 4;
  bytes data = 5; // Chunk of snapshot data
  bool done = 6; // True if this is the last chunk
}

message InstallSnapshotResponse {
  uint64 term = 1;
}
